// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketBooking.API.EF;

#nullable disable

namespace TicketBooking.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230723045746_updateconf2")]
    partial class updateconf2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketBooking.API.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("34ace022-a72d-47db-b2d4-693357dd901d");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 23, 11, 57, 45, 976, DateTimeKind.Local).AddTicks(1960));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c1",
                            IsDeleted = false,
                            Name = "Theater"
                        },
                        new
                        {
                            Id = "c2",
                            IsDeleted = false,
                            Name = "Music"
                        },
                        new
                        {
                            Id = "c3",
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = "c4",
                            IsDeleted = false,
                            Name = "Play"
                        });
                });

            modelBuilder.Entity("TicketBooking.API.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("34bb58bb-6557-417e-bfa7-f01aa99148f0");

                    b.Property<string>("City")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 23, 11, 57, 45, 974, DateTimeKind.Local).AddTicks(3360));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 11, 21, 15, 0, 0, DateTimeKind.Unspecified));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e1",
                            City = "",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "7:30 PM - 9:30 PM",
                            Image = "https://gonewiththetwins.com/new/wp-content/uploads/2016/06/click.jpg",
                            IsDeleted = false,
                            Location = "CGV Phu Tho",
                            MinPrice = 60000,
                            Status = 0,
                            Title = "The click"
                        },
                        new
                        {
                            Id = "e2",
                            City = "",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "10:00 PM - 11:30 PM",
                            Image = "https://kenhcine.cgv.vn/media/catalog/product/1/5/1545333390524.jpg",
                            IsDeleted = false,
                            Location = "CGV Phu Tho",
                            MinPrice = 70000,
                            Status = 0,
                            Title = "Man in Black V"
                        },
                        new
                        {
                            Id = "e3",
                            City = "",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "7:30 PM - 9:30 PM",
                            Image = "https://toplist.vn/images/800px/django-unchained-151603.jpg",
                            IsDeleted = false,
                            Location = "CGV Hung Vuong",
                            MinPrice = 80000,
                            Status = 0,
                            Title = "Django unchained"
                        },
                        new
                        {
                            Id = "e4",
                            City = "Hà Nội",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "7:30 PM - 9:30 PM",
                            Image = "https://kenh14cdn.com/thumb_w/600/203336854389633024/2022/12/13/photo1670894930473-1670894930937151252993.png",
                            IsDeleted = false,
                            Location = "New Arena Theater",
                            MinPrice = 70000,
                            Status = 0,
                            Title = "Gala Cười 2023"
                        },
                        new
                        {
                            Id = "e5",
                            City = "Hà Nội",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "6:30 PM - 7:00 PM",
                            Image = "https://static2.yan.vn/YanNews/2167221/202110/sky-tour-movie-tuoi-tre-nhiet-huyet-va-dam-me-cua-son-tung-mtp-08241d81.jpg",
                            IsDeleted = false,
                            Location = "New Arena Theater",
                            MinPrice = 65000,
                            Status = 0,
                            Title = "Sky Tour"
                        },
                        new
                        {
                            Id = "e6",
                            City = "Hà Nội",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Duration = "7:30 PM - 9:30 PM",
                            Image = "https://media-cdn-v2.laodong.vn/Storage/NewsPortal/2021/4/2/895272/Anh_2_Mytam_PR03.JPG",
                            IsDeleted = false,
                            Location = "The Savarin Theater",
                            MinPrice = 1000000,
                            Status = 0,
                            Title = "Mỹ Tâm - Liveshow tri âm"
                        });
                });

            modelBuilder.Entity("TicketBooking.API.Models.EventCategory", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("EventCategory", (string)null);

                    b.HasData(
                        new
                        {
                            EventId = "e1",
                            CategoryId = "c1"
                        },
                        new
                        {
                            EventId = "e2",
                            CategoryId = "c1"
                        },
                        new
                        {
                            EventId = "e3",
                            CategoryId = "c1"
                        },
                        new
                        {
                            EventId = "e4",
                            CategoryId = "c3"
                        },
                        new
                        {
                            EventId = "e5",
                            CategoryId = "c2"
                        },
                        new
                        {
                            EventId = "e6",
                            CategoryId = "c2"
                        },
                        new
                        {
                            EventId = "e5",
                            CategoryId = "c4"
                        });
                });

            modelBuilder.Entity("TicketBooking.API.Models.Invoice", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("430ed8ed-2cb5-46f0-9331-5abbcc3adf8b");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 23, 11, 57, 45, 975, DateTimeKind.Local).AddTicks(4030));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("TicketBooking.API.Models.Seat", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("f06b00da-ca7b-4741-8e2f-91f6040cede3");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 23, 11, 57, 45, 975, DateTimeKind.Local).AddTicks(9270));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("TicketBooking.API.Models.SeatEvent", b =>
                {
                    b.Property<string>("EventId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("EventId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatEvent", (string)null);
                });

            modelBuilder.Entity("TicketBooking.API.Models.SeatInvoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SeatId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("InvoiceId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatInvoice", (string)null);
                });

            modelBuilder.Entity("TicketBooking.API.Models.EventCategory", b =>
                {
                    b.HasOne("TicketBooking.API.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketBooking.API.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.API.Models.Invoice", b =>
                {
                    b.HasOne("TicketBooking.API.Models.Event", "Event")
                        .WithMany("Invoices")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("TicketBooking.API.Models.SeatEvent", b =>
                {
                    b.HasOne("TicketBooking.API.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketBooking.API.Models.Seat", null)
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.API.Models.SeatInvoice", b =>
                {
                    b.HasOne("TicketBooking.API.Models.Invoice", null)
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketBooking.API.Models.Seat", null)
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketBooking.API.Models.Event", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
